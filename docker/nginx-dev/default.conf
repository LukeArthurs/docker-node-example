server {
    listen 80;
    listen [::]:80;
    server_name example.com www.example.com;

    return 301 https://www.example.com$request_uri;
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name example.com;

    ssl_certificate /etc/nginx/ssl/www.example.com.dev.crt;
    ssl_certificate_key /etc/nginx/ssl/www.example.com.dev.key;

    return 301 https://www.example.com$request_uri;
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name www.example.com;

    ssl_certificate /etc/nginx/ssl/www.example.com.dev.crt;
    ssl_certificate_key /etc/nginx/ssl/www.example.com.dev.key;

    access_log /var/log/nginx/example.access.log;
    error_log /var/log/nginx/example.error.log;

    index index.html index.htm index.php;
    client_max_body_size 5M;

    location /api {
        proxy_pass http://example_node:3000;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header HTTPS $https;
    }

    location /keystone {
        proxy_pass http://example_node:3000;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header HTTPS $https;
    }

    # This is the only difference between the production nginx conf. This sends all requests to the angular container which is running the 
    # live development mode so you can take advantage of live reloading in your browser
    location / {
        proxy_pass http://example_angular:5555;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header HTTPS $https;
    }
}